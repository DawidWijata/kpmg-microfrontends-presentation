//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ILeagueApiService {
    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @return Success
     */
    getBasicInfo(summonerName: string | undefined, platformRoute: PlatformRoute | undefined): Observable<SwaggerResponse<Summoner>>;
    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @param page (optional) 
     * @return Success
     */
    getMatchHistory(summonerName: string | undefined, platformRoute: PlatformRoute | undefined, page: number | undefined): Observable<SwaggerResponse<Match[]>>;
    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @return Success
     */
    getRanking(summonerName: string | undefined, platformRoute: PlatformRoute | undefined): Observable<SwaggerResponse<LeagueEntry[]>>;
    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @return Success
     */
    getTopChampions(summonerName: string | undefined, platformRoute: PlatformRoute | undefined): Observable<SwaggerResponse<ChampionMasteryDto[]>>;
    /**
     * @return Success
     */
    getAvailableRegions(): Observable<SwaggerResponse<string[]>>;
}

@Injectable({
    providedIn: 'root'
})
export class LeagueApiService implements ILeagueApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @return Success
     */
    getBasicInfo(summonerName: string | undefined, platformRoute: PlatformRoute | undefined): Observable<SwaggerResponse<Summoner>> {
        let url_ = this.baseUrl + "/api/summoner/basic-info?";
        if (summonerName === null)
            throw new Error("The parameter 'summonerName' cannot be null.");
        else if (summonerName !== undefined)
            url_ += "SummonerName=" + encodeURIComponent("" + summonerName) + "&";
        if (platformRoute === null)
            throw new Error("The parameter 'platformRoute' cannot be null.");
        else if (platformRoute !== undefined)
            url_ += "PlatformRoute=" + encodeURIComponent("" + platformRoute) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBasicInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBasicInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<Summoner>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<Summoner>>;
        }));
    }

    protected processGetBasicInfo(response: HttpResponseBase): Observable<SwaggerResponse<Summoner>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Summoner.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<Summoner>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @param page (optional) 
     * @return Success
     */
    getMatchHistory(summonerName: string | undefined, platformRoute: PlatformRoute | undefined, page: number | undefined): Observable<SwaggerResponse<Match[]>> {
        let url_ = this.baseUrl + "/api/summoner/match-history?";
        if (summonerName === null)
            throw new Error("The parameter 'summonerName' cannot be null.");
        else if (summonerName !== undefined)
            url_ += "SummonerName=" + encodeURIComponent("" + summonerName) + "&";
        if (platformRoute === null)
            throw new Error("The parameter 'platformRoute' cannot be null.");
        else if (platformRoute !== undefined)
            url_ += "PlatformRoute=" + encodeURIComponent("" + platformRoute) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMatchHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMatchHistory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<Match[]>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<Match[]>>;
        }));
    }

    protected processGetMatchHistory(response: HttpResponseBase): Observable<SwaggerResponse<Match[]>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Match.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<Match[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @return Success
     */
    getRanking(summonerName: string | undefined, platformRoute: PlatformRoute | undefined): Observable<SwaggerResponse<LeagueEntry[]>> {
        let url_ = this.baseUrl + "/api/summoner/ranking?";
        if (summonerName === null)
            throw new Error("The parameter 'summonerName' cannot be null.");
        else if (summonerName !== undefined)
            url_ += "SummonerName=" + encodeURIComponent("" + summonerName) + "&";
        if (platformRoute === null)
            throw new Error("The parameter 'platformRoute' cannot be null.");
        else if (platformRoute !== undefined)
            url_ += "PlatformRoute=" + encodeURIComponent("" + platformRoute) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRanking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRanking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<LeagueEntry[]>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<LeagueEntry[]>>;
        }));
    }

    protected processGetRanking(response: HttpResponseBase): Observable<SwaggerResponse<LeagueEntry[]>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeagueEntry.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<LeagueEntry[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param summonerName (optional) 
     * @param platformRoute (optional) 
     * @return Success
     */
    getTopChampions(summonerName: string | undefined, platformRoute: PlatformRoute | undefined): Observable<SwaggerResponse<ChampionMasteryDto[]>> {
        let url_ = this.baseUrl + "/api/summoner/top-champions?";
        if (summonerName === null)
            throw new Error("The parameter 'summonerName' cannot be null.");
        else if (summonerName !== undefined)
            url_ += "SummonerName=" + encodeURIComponent("" + summonerName) + "&";
        if (platformRoute === null)
            throw new Error("The parameter 'platformRoute' cannot be null.");
        else if (platformRoute !== undefined)
            url_ += "PlatformRoute=" + encodeURIComponent("" + platformRoute) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTopChampions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTopChampions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<ChampionMasteryDto[]>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<ChampionMasteryDto[]>>;
        }));
    }

    protected processGetTopChampions(response: HttpResponseBase): Observable<SwaggerResponse<ChampionMasteryDto[]>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChampionMasteryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<ChampionMasteryDto[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return Success
     */
    getAvailableRegions(): Observable<SwaggerResponse<string[]>> {
        let url_ = this.baseUrl + "/api/summoner/regions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvailableRegions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvailableRegions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<string[]>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<string[]>>;
        }));
    }

    protected processGetAvailableRegions(response: HttpResponseBase): Observable<SwaggerResponse<string[]>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<string[]>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export enum Champion {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _20 = 20,
    _21 = 21,
    _22 = 22,
    _23 = 23,
    _24 = 24,
    _25 = 25,
    _26 = 26,
    _27 = 27,
    _28 = 28,
    _29 = 29,
    _30 = 30,
    _31 = 31,
    _32 = 32,
    _33 = 33,
    _34 = 34,
    _35 = 35,
    _36 = 36,
    _37 = 37,
    _38 = 38,
    _39 = 39,
    _40 = 40,
    _41 = 41,
    _42 = 42,
    _43 = 43,
    _44 = 44,
    _45 = 45,
    _48 = 48,
    _50 = 50,
    _51 = 51,
    _53 = 53,
    _54 = 54,
    _55 = 55,
    _56 = 56,
    _57 = 57,
    _58 = 58,
    _59 = 59,
    _60 = 60,
    _61 = 61,
    _62 = 62,
    _63 = 63,
    _64 = 64,
    _67 = 67,
    _68 = 68,
    _69 = 69,
    _72 = 72,
    _74 = 74,
    _75 = 75,
    _76 = 76,
    _77 = 77,
    _78 = 78,
    _79 = 79,
    _80 = 80,
    _81 = 81,
    _82 = 82,
    _83 = 83,
    _84 = 84,
    _85 = 85,
    _86 = 86,
    _89 = 89,
    _90 = 90,
    _91 = 91,
    _92 = 92,
    _96 = 96,
    _98 = 98,
    _99 = 99,
    _101 = 101,
    _102 = 102,
    _103 = 103,
    _104 = 104,
    _105 = 105,
    _106 = 106,
    _107 = 107,
    _110 = 110,
    _111 = 111,
    _112 = 112,
    _113 = 113,
    _114 = 114,
    _115 = 115,
    _117 = 117,
    _119 = 119,
    _120 = 120,
    _121 = 121,
    _122 = 122,
    _126 = 126,
    _127 = 127,
    _131 = 131,
    _133 = 133,
    _134 = 134,
    _136 = 136,
    _141 = 141,
    _142 = 142,
    _143 = 143,
    _145 = 145,
    _147 = 147,
    _150 = 150,
    _154 = 154,
    _157 = 157,
    _161 = 161,
    _163 = 163,
    _164 = 164,
    _166 = 166,
    _200 = 200,
    _201 = 201,
    _202 = 202,
    _203 = 203,
    _221 = 221,
    _222 = 222,
    _223 = 223,
    _234 = 234,
    _235 = 235,
    _236 = 236,
    _238 = 238,
    _240 = 240,
    _245 = 245,
    _246 = 246,
    _254 = 254,
    _266 = 266,
    _267 = 267,
    _268 = 268,
    _350 = 350,
    _360 = 360,
    _412 = 412,
    _420 = 420,
    _421 = 421,
    _427 = 427,
    _429 = 429,
    _432 = 432,
    _497 = 497,
    _498 = 498,
    _516 = 516,
    _517 = 517,
    _518 = 518,
    _523 = 523,
    _526 = 526,
    _555 = 555,
    _711 = 711,
    _777 = 777,
    _875 = 875,
    _876 = 876,
    _887 = 887,
    _888 = 888,
    _895 = 895,
    __1 = -1,
}

export enum Division {
    NONE = "NONE",
    I = "I",
    II = "II",
    III = "III",
    IV = "IV",
    V = "V",
}

export enum GameMode {
    ARAM = "ARAM",
    ARSR = "ARSR",
    ASCENSION = "ASCENSION",
    ASSASSINATE = "ASSASSINATE",
    CLASSIC = "CLASSIC",
    DARKSTAR = "DARKSTAR",
    DOOMBOTSTEEMO = "DOOMBOTSTEEMO",
    FIRSTBLOOD = "FIRSTBLOOD",
    GAMEMODEX = "GAMEMODEX",
    KINGPORO = "KINGPORO",
    NEXUSBLITZ = "NEXUSBLITZ",
    ODIN = "ODIN",
    ODYSSEY = "ODYSSEY",
    ONEFORALL = "ONEFORALL",
    PRACTICETOOL = "PRACTICETOOL",
    PROJECT = "PROJECT",
    SIEGE = "SIEGE",
    STARGUARDIAN = "STARGUARDIAN",
    TUTORIAL = "TUTORIAL",
    TUTORIAL_MODULE_1 = "TUTORIAL_MODULE_1",
    TUTORIAL_MODULE_2 = "TUTORIAL_MODULE_2",
    TUTORIAL_MODULE_3 = "TUTORIAL_MODULE_3",
    ULTBOOK = "ULTBOOK",
    URF = "URF",
}

export enum GameType {
    CUSTOM_GAME = "CUSTOM_GAME",
    MATCHED_GAME = "MATCHED_GAME",
    TUTORIAL_GAME = "TUTORIAL_GAME",
}

export enum Map {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _8 = 8,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _14 = 14,
    _16 = 16,
    _18 = 18,
    _19 = 19,
    _20 = 20,
    _21 = 21,
    _22 = 22,
}

export enum PlatformRoute {
    BR1 = "BR1",
    EUN1 = "EUN1",
    EUW1 = "EUW1",
    JP1 = "JP1",
    KR = "KR",
    LA1 = "LA1",
    LA2 = "LA2",
    NA1 = "NA1",
    OC1 = "OC1",
    RU = "RU",
    TR1 = "TR1",
    PBE1 = "PBE1",
}

export enum Queue {
    _0 = 0,
    _2 = 2,
    _4 = 4,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _14 = 14,
    _16 = 16,
    _17 = 17,
    _25 = 25,
    _31 = 31,
    _32 = 32,
    _33 = 33,
    _41 = 41,
    _42 = 42,
    _52 = 52,
    _61 = 61,
    _65 = 65,
    _67 = 67,
    _70 = 70,
    _72 = 72,
    _73 = 73,
    _75 = 75,
    _76 = 76,
    _78 = 78,
    _83 = 83,
    _91 = 91,
    _92 = 92,
    _93 = 93,
    _96 = 96,
    _98 = 98,
    _100 = 100,
    _300 = 300,
    _310 = 310,
    _313 = 313,
    _315 = 315,
    _317 = 317,
    _318 = 318,
    _325 = 325,
    _400 = 400,
    _410 = 410,
    _420 = 420,
    _430 = 430,
    _440 = 440,
    _450 = 450,
    _460 = 460,
    _470 = 470,
    _600 = 600,
    _610 = 610,
    _700 = 700,
    _800 = 800,
    _810 = 810,
    _820 = 820,
    _830 = 830,
    _840 = 840,
    _850 = 850,
    _900 = 900,
    _910 = 910,
    _920 = 920,
    _940 = 940,
    _950 = 950,
    _960 = 960,
    _980 = 980,
    _990 = 990,
    _1000 = 1000,
    _1010 = 1010,
    _1020 = 1020,
    _1030 = 1030,
    _1040 = 1040,
    _1050 = 1050,
    _1060 = 1060,
    _1070 = 1070,
    _1090 = 1090,
    _1091 = 1091,
    _1092 = 1092,
    _1100 = 1100,
    _1110 = 1110,
    _1111 = 1111,
    _1130 = 1130,
    _1150 = 1150,
    _1160 = 1160,
    _1200 = 1200,
    _1300 = 1300,
    _1400 = 1400,
    _1900 = 1900,
    _2000 = 2000,
    _2010 = 2010,
    _2020 = 2020,
}

export enum QueueType {
    NONE = "NONE",
    RANKED_SOLO_5x5 = "RANKED_SOLO_5x5",
    RANKED_FLEX_SR = "RANKED_FLEX_SR",
    RANKED_FLEX_TT = "RANKED_FLEX_TT",
    RANKED_TFT = "RANKED_TFT",
    RANKED_TFT_TURBO = "RANKED_TFT_TURBO",
    RANKED_TFT_PAIRS = "RANKED_TFT_PAIRS",
    RANKED_TFT_DOUBLE_UP = "RANKED_TFT_DOUBLE_UP",
}

export enum Tier {
    CHALLENGER = "CHALLENGER",
    GRANDMASTER = "GRANDMASTER",
    MASTER = "MASTER",
    DIAMOND = "DIAMOND",
    PLATINUM = "PLATINUM",
    GOLD = "GOLD",
    SILVER = "SILVER",
    BRONZE = "BRONZE",
    IRON = "IRON",
    NONE = "NONE",
}

export class ChampionMastery implements IChampionMastery {
    championId?: Champion;
    championLevel?: number;
    championPoints?: number;
    championPointsSinceLastLevel?: number;
    championPointsUntilNextLevel?: number;
    chestGranted?: boolean;
    lastPlayTime?: number;
    summonerId?: string | undefined;
    tokensEarned?: number;

    [key: string]: any;

    constructor(data?: IChampionMastery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.championId = _data["championId"];
            this.championLevel = _data["championLevel"];
            this.championPoints = _data["championPoints"];
            this.championPointsSinceLastLevel = _data["championPointsSinceLastLevel"];
            this.championPointsUntilNextLevel = _data["championPointsUntilNextLevel"];
            this.chestGranted = _data["chestGranted"];
            this.lastPlayTime = _data["lastPlayTime"];
            this.summonerId = _data["summonerId"];
            this.tokensEarned = _data["tokensEarned"];
        }
    }

    static fromJS(data: any): ChampionMastery {
        data = typeof data === 'object' ? data : {};
        let result = new ChampionMastery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["championId"] = this.championId;
        data["championLevel"] = this.championLevel;
        data["championPoints"] = this.championPoints;
        data["championPointsSinceLastLevel"] = this.championPointsSinceLastLevel;
        data["championPointsUntilNextLevel"] = this.championPointsUntilNextLevel;
        data["chestGranted"] = this.chestGranted;
        data["lastPlayTime"] = this.lastPlayTime;
        data["summonerId"] = this.summonerId;
        data["tokensEarned"] = this.tokensEarned;
        return data;
    }

    clone(): ChampionMastery {
        const json = this.toJSON();
        let result = new ChampionMastery();
        result.init(json);
        return result;
    }
}

export interface IChampionMastery {
    championId?: Champion;
    championLevel?: number;
    championPoints?: number;
    championPointsSinceLastLevel?: number;
    championPointsUntilNextLevel?: number;
    chestGranted?: boolean;
    lastPlayTime?: number;
    summonerId?: string | undefined;
    tokensEarned?: number;

    [key: string]: any;
}

export enum Team {
    _100 = 100,
    _200 = 200,
    _300 = 300,
}

export class LeagueEntry implements ILeagueEntry {
    freshBlood?: boolean;
    hotStreak?: boolean;
    inactive?: boolean;
    leagueId?: string | undefined;
    leaguePoints?: number;
    losses?: number;
    miniSeries?: MiniSeries;
    queueType?: QueueType;
    rank?: Division;
    summonerId?: string | undefined;
    summonerName?: string | undefined;
    tier?: Tier;
    veteran?: boolean;
    wins?: number;

    [key: string]: any;

    constructor(data?: ILeagueEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.freshBlood = _data["freshBlood"];
            this.hotStreak = _data["hotStreak"];
            this.inactive = _data["inactive"];
            this.leagueId = _data["leagueId"];
            this.leaguePoints = _data["leaguePoints"];
            this.losses = _data["losses"];
            this.miniSeries = _data["miniSeries"] ? MiniSeries.fromJS(_data["miniSeries"]) : <any>undefined;
            this.queueType = _data["queueType"];
            this.rank = _data["rank"];
            this.summonerId = _data["summonerId"];
            this.summonerName = _data["summonerName"];
            this.tier = _data["tier"];
            this.veteran = _data["veteran"];
            this.wins = _data["wins"];
        }
    }

    static fromJS(data: any): LeagueEntry {
        data = typeof data === 'object' ? data : {};
        let result = new LeagueEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["freshBlood"] = this.freshBlood;
        data["hotStreak"] = this.hotStreak;
        data["inactive"] = this.inactive;
        data["leagueId"] = this.leagueId;
        data["leaguePoints"] = this.leaguePoints;
        data["losses"] = this.losses;
        data["miniSeries"] = this.miniSeries ? this.miniSeries.toJSON() : <any>undefined;
        data["queueType"] = this.queueType;
        data["rank"] = this.rank;
        data["summonerId"] = this.summonerId;
        data["summonerName"] = this.summonerName;
        data["tier"] = this.tier;
        data["veteran"] = this.veteran;
        data["wins"] = this.wins;
        return data;
    }

    clone(): LeagueEntry {
        const json = this.toJSON();
        let result = new LeagueEntry();
        result.init(json);
        return result;
    }
}

export interface ILeagueEntry {
    freshBlood?: boolean;
    hotStreak?: boolean;
    inactive?: boolean;
    leagueId?: string | undefined;
    leaguePoints?: number;
    losses?: number;
    miniSeries?: MiniSeries;
    queueType?: QueueType;
    rank?: Division;
    summonerId?: string | undefined;
    summonerName?: string | undefined;
    tier?: Tier;
    veteran?: boolean;
    wins?: number;

    [key: string]: any;
}

export class MiniSeries implements IMiniSeries {
    losses?: number;
    progress?: string | undefined;
    target?: number;
    wins?: number;

    [key: string]: any;

    constructor(data?: IMiniSeries) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.losses = _data["losses"];
            this.progress = _data["progress"];
            this.target = _data["target"];
            this.wins = _data["wins"];
        }
    }

    static fromJS(data: any): MiniSeries {
        data = typeof data === 'object' ? data : {};
        let result = new MiniSeries();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["losses"] = this.losses;
        data["progress"] = this.progress;
        data["target"] = this.target;
        data["wins"] = this.wins;
        return data;
    }

    clone(): MiniSeries {
        const json = this.toJSON();
        let result = new MiniSeries();
        result.init(json);
        return result;
    }
}

export interface IMiniSeries {
    losses?: number;
    progress?: string | undefined;
    target?: number;
    wins?: number;

    [key: string]: any;
}

export class Ban implements IBan {
    championId?: Champion;
    pickTurn?: number;

    [key: string]: any;

    constructor(data?: IBan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.championId = _data["championId"];
            this.pickTurn = _data["pickTurn"];
        }
    }

    static fromJS(data: any): Ban {
        data = typeof data === 'object' ? data : {};
        let result = new Ban();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["championId"] = this.championId;
        data["pickTurn"] = this.pickTurn;
        return data;
    }

    clone(): Ban {
        const json = this.toJSON();
        let result = new Ban();
        result.init(json);
        return result;
    }
}

export interface IBan {
    championId?: Champion;
    pickTurn?: number;

    [key: string]: any;
}

export class Info implements IInfo {
    gameCreation?: number;
    gameDuration?: number;
    gameEndTimestamp?: number | undefined;
    gameId?: number;
    gameMode?: GameMode;
    gameName?: string | undefined;
    gameStartTimestamp?: number;
    gameType?: GameType;
    gameVersion?: string | undefined;
    mapId?: Map;
    participants?: Participant[] | undefined;
    platformId?: string | undefined;
    queueId?: Queue;
    teams?: Team2[] | undefined;
    tournamentCode?: string | undefined;

    [key: string]: any;

    constructor(data?: IInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.gameCreation = _data["gameCreation"];
            this.gameDuration = _data["gameDuration"];
            this.gameEndTimestamp = _data["gameEndTimestamp"];
            this.gameId = _data["gameId"];
            this.gameMode = _data["gameMode"];
            this.gameName = _data["gameName"];
            this.gameStartTimestamp = _data["gameStartTimestamp"];
            this.gameType = _data["gameType"];
            this.gameVersion = _data["gameVersion"];
            this.mapId = _data["mapId"];
            if (Array.isArray(_data["participants"])) {
                this.participants = [] as any;
                for (let item of _data["participants"])
                    this.participants!.push(Participant.fromJS(item));
            }
            this.platformId = _data["platformId"];
            this.queueId = _data["queueId"];
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(Team2.fromJS(item));
            }
            this.tournamentCode = _data["tournamentCode"];
        }
    }

    static fromJS(data: any): Info {
        data = typeof data === 'object' ? data : {};
        let result = new Info();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["gameCreation"] = this.gameCreation;
        data["gameDuration"] = this.gameDuration;
        data["gameEndTimestamp"] = this.gameEndTimestamp;
        data["gameId"] = this.gameId;
        data["gameMode"] = this.gameMode;
        data["gameName"] = this.gameName;
        data["gameStartTimestamp"] = this.gameStartTimestamp;
        data["gameType"] = this.gameType;
        data["gameVersion"] = this.gameVersion;
        data["mapId"] = this.mapId;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        data["platformId"] = this.platformId;
        data["queueId"] = this.queueId;
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        data["tournamentCode"] = this.tournamentCode;
        return data;
    }

    clone(): Info {
        const json = this.toJSON();
        let result = new Info();
        result.init(json);
        return result;
    }
}

export interface IInfo {
    gameCreation?: number;
    gameDuration?: number;
    gameEndTimestamp?: number | undefined;
    gameId?: number;
    gameMode?: GameMode;
    gameName?: string | undefined;
    gameStartTimestamp?: number;
    gameType?: GameType;
    gameVersion?: string | undefined;
    mapId?: Map;
    participants?: Participant[] | undefined;
    platformId?: string | undefined;
    queueId?: Queue;
    teams?: Team2[] | undefined;
    tournamentCode?: string | undefined;

    [key: string]: any;
}

export class Match implements IMatch {
    info?: Info;
    metadata?: Metadata;

    [key: string]: any;

    constructor(data?: IMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.info = _data["info"] ? Info.fromJS(_data["info"]) : <any>undefined;
            this.metadata = _data["metadata"] ? Metadata.fromJS(_data["metadata"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Match {
        data = typeof data === 'object' ? data : {};
        let result = new Match();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
        return data;
    }

    clone(): Match {
        const json = this.toJSON();
        let result = new Match();
        result.init(json);
        return result;
    }
}

export interface IMatch {
    info?: Info;
    metadata?: Metadata;

    [key: string]: any;
}

export class Metadata implements IMetadata {
    dataVersion?: string | undefined;
    matchId?: string | undefined;
    participants?: string[] | undefined;

    [key: string]: any;

    constructor(data?: IMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.dataVersion = _data["dataVersion"];
            this.matchId = _data["matchId"];
            if (Array.isArray(_data["participants"])) {
                this.participants = [] as any;
                for (let item of _data["participants"])
                    this.participants!.push(item);
            }
        }
    }

    static fromJS(data: any): Metadata {
        data = typeof data === 'object' ? data : {};
        let result = new Metadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["dataVersion"] = this.dataVersion;
        data["matchId"] = this.matchId;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item);
        }
        return data;
    }

    clone(): Metadata {
        const json = this.toJSON();
        let result = new Metadata();
        result.init(json);
        return result;
    }
}

export interface IMetadata {
    dataVersion?: string | undefined;
    matchId?: string | undefined;
    participants?: string[] | undefined;

    [key: string]: any;
}

export class Objective implements IObjective {
    first?: boolean;
    kills?: number;

    [key: string]: any;

    constructor(data?: IObjective) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.first = _data["first"];
            this.kills = _data["kills"];
        }
    }

    static fromJS(data: any): Objective {
        data = typeof data === 'object' ? data : {};
        let result = new Objective();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["first"] = this.first;
        data["kills"] = this.kills;
        return data;
    }

    clone(): Objective {
        const json = this.toJSON();
        let result = new Objective();
        result.init(json);
        return result;
    }
}

export interface IObjective {
    first?: boolean;
    kills?: number;

    [key: string]: any;
}

export class Objectives implements IObjectives {
    baron?: Objective;
    champion?: Objective;
    dragon?: Objective;
    inhibitor?: Objective;
    riftHerald?: Objective;
    tower?: Objective;

    [key: string]: any;

    constructor(data?: IObjectives) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.baron = _data["baron"] ? Objective.fromJS(_data["baron"]) : <any>undefined;
            this.champion = _data["champion"] ? Objective.fromJS(_data["champion"]) : <any>undefined;
            this.dragon = _data["dragon"] ? Objective.fromJS(_data["dragon"]) : <any>undefined;
            this.inhibitor = _data["inhibitor"] ? Objective.fromJS(_data["inhibitor"]) : <any>undefined;
            this.riftHerald = _data["riftHerald"] ? Objective.fromJS(_data["riftHerald"]) : <any>undefined;
            this.tower = _data["tower"] ? Objective.fromJS(_data["tower"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Objectives {
        data = typeof data === 'object' ? data : {};
        let result = new Objectives();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["baron"] = this.baron ? this.baron.toJSON() : <any>undefined;
        data["champion"] = this.champion ? this.champion.toJSON() : <any>undefined;
        data["dragon"] = this.dragon ? this.dragon.toJSON() : <any>undefined;
        data["inhibitor"] = this.inhibitor ? this.inhibitor.toJSON() : <any>undefined;
        data["riftHerald"] = this.riftHerald ? this.riftHerald.toJSON() : <any>undefined;
        data["tower"] = this.tower ? this.tower.toJSON() : <any>undefined;
        return data;
    }

    clone(): Objectives {
        const json = this.toJSON();
        let result = new Objectives();
        result.init(json);
        return result;
    }
}

export interface IObjectives {
    baron?: Objective;
    champion?: Objective;
    dragon?: Objective;
    inhibitor?: Objective;
    riftHerald?: Objective;
    tower?: Objective;

    [key: string]: any;
}

export class Participant implements IParticipant {
    assists?: number;
    baronKills?: number;
    bountyLevel?: number;
    challenges?: ParticipantChallenges;
    champExperience?: number;
    championId?: Champion;
    championName?: string | undefined;
    championTransform?: number;
    champLevel?: number;
    consumablesPurchased?: number;
    damageDealtToBuildings?: number | undefined;
    damageDealtToObjectives?: number;
    damageDealtToTurrets?: number;
    damageSelfMitigated?: number;
    deaths?: number;
    detectorWardsPlaced?: number;
    doubleKills?: number;
    dragonKills?: number;
    firstBloodAssist?: boolean;
    firstBloodKill?: boolean;
    firstTowerAssist?: boolean;
    firstTowerKill?: boolean;
    gameEndedInEarlySurrender?: boolean;
    gameEndedInSurrender?: boolean;
    goldEarned?: number;
    goldSpent?: number;
    individualPosition?: string | undefined;
    inhibitorKills?: number;
    inhibitorsLost?: number | undefined;
    inhibitorTakedowns?: number | undefined;
    item0?: number;
    item1?: number;
    item2?: number;
    item3?: number;
    item4?: number;
    item5?: number;
    item6?: number;
    itemsPurchased?: number;
    killingSprees?: number;
    kills?: number;
    lane?: string | undefined;
    largestCriticalStrike?: number;
    largestKillingSpree?: number;
    largestMultiKill?: number;
    longestTimeSpentLiving?: number;
    magicDamageDealt?: number;
    magicDamageDealtToChampions?: number;
    magicDamageTaken?: number;
    neutralMinionsKilled?: number;
    nexusKills?: number;
    nexusLost?: number | undefined;
    nexusTakedowns?: number | undefined;
    objectivesStolen?: number;
    objectivesStolenAssists?: number;
    participantId?: number;
    pentaKills?: number;
    perks?: Perks;
    physicalDamageDealt?: number;
    physicalDamageDealtToChampions?: number;
    physicalDamageTaken?: number;
    profileIcon?: number;
    puuid?: string | undefined;
    quadraKills?: number;
    riotIdName?: string | undefined;
    riotIdTagline?: string | undefined;
    role?: string | undefined;
    sightWardsBoughtInGame?: number;
    spell1Casts?: number;
    spell2Casts?: number;
    spell3Casts?: number;
    spell4Casts?: number;
    summoner1Casts?: number;
    summoner1Id?: number;
    summoner2Casts?: number;
    summoner2Id?: number;
    summonerId?: string | undefined;
    summonerLevel?: number;
    summonerName?: string | undefined;
    teamEarlySurrendered?: boolean;
    teamId?: Team;
    teamPosition?: string | undefined;
    timeCCingOthers?: number;
    timePlayed?: number;
    totalDamageDealt?: number;
    totalDamageDealtToChampions?: number;
    totalDamageShieldedOnTeammates?: number;
    totalDamageTaken?: number;
    totalHeal?: number;
    totalHealsOnTeammates?: number;
    totalMinionsKilled?: number;
    totalTimeCCDealt?: number;
    totalTimeSpentDead?: number;
    totalUnitsHealed?: number;
    tripleKills?: number;
    trueDamageDealt?: number;
    trueDamageDealtToChampions?: number;
    trueDamageTaken?: number;
    turretKills?: number;
    turretsLost?: number | undefined;
    turretTakedowns?: number | undefined;
    unrealKills?: number;
    visionScore?: number;
    visionWardsBoughtInGame?: number;
    wardsKilled?: number;
    wardsPlaced?: number;
    win?: boolean;

    [key: string]: any;

    constructor(data?: IParticipant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.assists = _data["assists"];
            this.baronKills = _data["baronKills"];
            this.bountyLevel = _data["bountyLevel"];
            this.challenges = _data["challenges"] ? ParticipantChallenges.fromJS(_data["challenges"]) : <any>undefined;
            this.champExperience = _data["champExperience"];
            this.championId = _data["championId"];
            this.championName = _data["championName"];
            this.championTransform = _data["championTransform"];
            this.champLevel = _data["champLevel"];
            this.consumablesPurchased = _data["consumablesPurchased"];
            this.damageDealtToBuildings = _data["damageDealtToBuildings"];
            this.damageDealtToObjectives = _data["damageDealtToObjectives"];
            this.damageDealtToTurrets = _data["damageDealtToTurrets"];
            this.damageSelfMitigated = _data["damageSelfMitigated"];
            this.deaths = _data["deaths"];
            this.detectorWardsPlaced = _data["detectorWardsPlaced"];
            this.doubleKills = _data["doubleKills"];
            this.dragonKills = _data["dragonKills"];
            this.firstBloodAssist = _data["firstBloodAssist"];
            this.firstBloodKill = _data["firstBloodKill"];
            this.firstTowerAssist = _data["firstTowerAssist"];
            this.firstTowerKill = _data["firstTowerKill"];
            this.gameEndedInEarlySurrender = _data["gameEndedInEarlySurrender"];
            this.gameEndedInSurrender = _data["gameEndedInSurrender"];
            this.goldEarned = _data["goldEarned"];
            this.goldSpent = _data["goldSpent"];
            this.individualPosition = _data["individualPosition"];
            this.inhibitorKills = _data["inhibitorKills"];
            this.inhibitorsLost = _data["inhibitorsLost"];
            this.inhibitorTakedowns = _data["inhibitorTakedowns"];
            this.item0 = _data["item0"];
            this.item1 = _data["item1"];
            this.item2 = _data["item2"];
            this.item3 = _data["item3"];
            this.item4 = _data["item4"];
            this.item5 = _data["item5"];
            this.item6 = _data["item6"];
            this.itemsPurchased = _data["itemsPurchased"];
            this.killingSprees = _data["killingSprees"];
            this.kills = _data["kills"];
            this.lane = _data["lane"];
            this.largestCriticalStrike = _data["largestCriticalStrike"];
            this.largestKillingSpree = _data["largestKillingSpree"];
            this.largestMultiKill = _data["largestMultiKill"];
            this.longestTimeSpentLiving = _data["longestTimeSpentLiving"];
            this.magicDamageDealt = _data["magicDamageDealt"];
            this.magicDamageDealtToChampions = _data["magicDamageDealtToChampions"];
            this.magicDamageTaken = _data["magicDamageTaken"];
            this.neutralMinionsKilled = _data["neutralMinionsKilled"];
            this.nexusKills = _data["nexusKills"];
            this.nexusLost = _data["nexusLost"];
            this.nexusTakedowns = _data["nexusTakedowns"];
            this.objectivesStolen = _data["objectivesStolen"];
            this.objectivesStolenAssists = _data["objectivesStolenAssists"];
            this.participantId = _data["participantId"];
            this.pentaKills = _data["pentaKills"];
            this.perks = _data["perks"] ? Perks.fromJS(_data["perks"]) : <any>undefined;
            this.physicalDamageDealt = _data["physicalDamageDealt"];
            this.physicalDamageDealtToChampions = _data["physicalDamageDealtToChampions"];
            this.physicalDamageTaken = _data["physicalDamageTaken"];
            this.profileIcon = _data["profileIcon"];
            this.puuid = _data["puuid"];
            this.quadraKills = _data["quadraKills"];
            this.riotIdName = _data["riotIdName"];
            this.riotIdTagline = _data["riotIdTagline"];
            this.role = _data["role"];
            this.sightWardsBoughtInGame = _data["sightWardsBoughtInGame"];
            this.spell1Casts = _data["spell1Casts"];
            this.spell2Casts = _data["spell2Casts"];
            this.spell3Casts = _data["spell3Casts"];
            this.spell4Casts = _data["spell4Casts"];
            this.summoner1Casts = _data["summoner1Casts"];
            this.summoner1Id = _data["summoner1Id"];
            this.summoner2Casts = _data["summoner2Casts"];
            this.summoner2Id = _data["summoner2Id"];
            this.summonerId = _data["summonerId"];
            this.summonerLevel = _data["summonerLevel"];
            this.summonerName = _data["summonerName"];
            this.teamEarlySurrendered = _data["teamEarlySurrendered"];
            this.teamId = _data["teamId"];
            this.teamPosition = _data["teamPosition"];
            this.timeCCingOthers = _data["timeCCingOthers"];
            this.timePlayed = _data["timePlayed"];
            this.totalDamageDealt = _data["totalDamageDealt"];
            this.totalDamageDealtToChampions = _data["totalDamageDealtToChampions"];
            this.totalDamageShieldedOnTeammates = _data["totalDamageShieldedOnTeammates"];
            this.totalDamageTaken = _data["totalDamageTaken"];
            this.totalHeal = _data["totalHeal"];
            this.totalHealsOnTeammates = _data["totalHealsOnTeammates"];
            this.totalMinionsKilled = _data["totalMinionsKilled"];
            this.totalTimeCCDealt = _data["totalTimeCCDealt"];
            this.totalTimeSpentDead = _data["totalTimeSpentDead"];
            this.totalUnitsHealed = _data["totalUnitsHealed"];
            this.tripleKills = _data["tripleKills"];
            this.trueDamageDealt = _data["trueDamageDealt"];
            this.trueDamageDealtToChampions = _data["trueDamageDealtToChampions"];
            this.trueDamageTaken = _data["trueDamageTaken"];
            this.turretKills = _data["turretKills"];
            this.turretsLost = _data["turretsLost"];
            this.turretTakedowns = _data["turretTakedowns"];
            this.unrealKills = _data["unrealKills"];
            this.visionScore = _data["visionScore"];
            this.visionWardsBoughtInGame = _data["visionWardsBoughtInGame"];
            this.wardsKilled = _data["wardsKilled"];
            this.wardsPlaced = _data["wardsPlaced"];
            this.win = _data["win"];
        }
    }

    static fromJS(data: any): Participant {
        data = typeof data === 'object' ? data : {};
        let result = new Participant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["assists"] = this.assists;
        data["baronKills"] = this.baronKills;
        data["bountyLevel"] = this.bountyLevel;
        data["challenges"] = this.challenges ? this.challenges.toJSON() : <any>undefined;
        data["champExperience"] = this.champExperience;
        data["championId"] = this.championId;
        data["championName"] = this.championName;
        data["championTransform"] = this.championTransform;
        data["champLevel"] = this.champLevel;
        data["consumablesPurchased"] = this.consumablesPurchased;
        data["damageDealtToBuildings"] = this.damageDealtToBuildings;
        data["damageDealtToObjectives"] = this.damageDealtToObjectives;
        data["damageDealtToTurrets"] = this.damageDealtToTurrets;
        data["damageSelfMitigated"] = this.damageSelfMitigated;
        data["deaths"] = this.deaths;
        data["detectorWardsPlaced"] = this.detectorWardsPlaced;
        data["doubleKills"] = this.doubleKills;
        data["dragonKills"] = this.dragonKills;
        data["firstBloodAssist"] = this.firstBloodAssist;
        data["firstBloodKill"] = this.firstBloodKill;
        data["firstTowerAssist"] = this.firstTowerAssist;
        data["firstTowerKill"] = this.firstTowerKill;
        data["gameEndedInEarlySurrender"] = this.gameEndedInEarlySurrender;
        data["gameEndedInSurrender"] = this.gameEndedInSurrender;
        data["goldEarned"] = this.goldEarned;
        data["goldSpent"] = this.goldSpent;
        data["individualPosition"] = this.individualPosition;
        data["inhibitorKills"] = this.inhibitorKills;
        data["inhibitorsLost"] = this.inhibitorsLost;
        data["inhibitorTakedowns"] = this.inhibitorTakedowns;
        data["item0"] = this.item0;
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        data["item4"] = this.item4;
        data["item5"] = this.item5;
        data["item6"] = this.item6;
        data["itemsPurchased"] = this.itemsPurchased;
        data["killingSprees"] = this.killingSprees;
        data["kills"] = this.kills;
        data["lane"] = this.lane;
        data["largestCriticalStrike"] = this.largestCriticalStrike;
        data["largestKillingSpree"] = this.largestKillingSpree;
        data["largestMultiKill"] = this.largestMultiKill;
        data["longestTimeSpentLiving"] = this.longestTimeSpentLiving;
        data["magicDamageDealt"] = this.magicDamageDealt;
        data["magicDamageDealtToChampions"] = this.magicDamageDealtToChampions;
        data["magicDamageTaken"] = this.magicDamageTaken;
        data["neutralMinionsKilled"] = this.neutralMinionsKilled;
        data["nexusKills"] = this.nexusKills;
        data["nexusLost"] = this.nexusLost;
        data["nexusTakedowns"] = this.nexusTakedowns;
        data["objectivesStolen"] = this.objectivesStolen;
        data["objectivesStolenAssists"] = this.objectivesStolenAssists;
        data["participantId"] = this.participantId;
        data["pentaKills"] = this.pentaKills;
        data["perks"] = this.perks ? this.perks.toJSON() : <any>undefined;
        data["physicalDamageDealt"] = this.physicalDamageDealt;
        data["physicalDamageDealtToChampions"] = this.physicalDamageDealtToChampions;
        data["physicalDamageTaken"] = this.physicalDamageTaken;
        data["profileIcon"] = this.profileIcon;
        data["puuid"] = this.puuid;
        data["quadraKills"] = this.quadraKills;
        data["riotIdName"] = this.riotIdName;
        data["riotIdTagline"] = this.riotIdTagline;
        data["role"] = this.role;
        data["sightWardsBoughtInGame"] = this.sightWardsBoughtInGame;
        data["spell1Casts"] = this.spell1Casts;
        data["spell2Casts"] = this.spell2Casts;
        data["spell3Casts"] = this.spell3Casts;
        data["spell4Casts"] = this.spell4Casts;
        data["summoner1Casts"] = this.summoner1Casts;
        data["summoner1Id"] = this.summoner1Id;
        data["summoner2Casts"] = this.summoner2Casts;
        data["summoner2Id"] = this.summoner2Id;
        data["summonerId"] = this.summonerId;
        data["summonerLevel"] = this.summonerLevel;
        data["summonerName"] = this.summonerName;
        data["teamEarlySurrendered"] = this.teamEarlySurrendered;
        data["teamId"] = this.teamId;
        data["teamPosition"] = this.teamPosition;
        data["timeCCingOthers"] = this.timeCCingOthers;
        data["timePlayed"] = this.timePlayed;
        data["totalDamageDealt"] = this.totalDamageDealt;
        data["totalDamageDealtToChampions"] = this.totalDamageDealtToChampions;
        data["totalDamageShieldedOnTeammates"] = this.totalDamageShieldedOnTeammates;
        data["totalDamageTaken"] = this.totalDamageTaken;
        data["totalHeal"] = this.totalHeal;
        data["totalHealsOnTeammates"] = this.totalHealsOnTeammates;
        data["totalMinionsKilled"] = this.totalMinionsKilled;
        data["totalTimeCCDealt"] = this.totalTimeCCDealt;
        data["totalTimeSpentDead"] = this.totalTimeSpentDead;
        data["totalUnitsHealed"] = this.totalUnitsHealed;
        data["tripleKills"] = this.tripleKills;
        data["trueDamageDealt"] = this.trueDamageDealt;
        data["trueDamageDealtToChampions"] = this.trueDamageDealtToChampions;
        data["trueDamageTaken"] = this.trueDamageTaken;
        data["turretKills"] = this.turretKills;
        data["turretsLost"] = this.turretsLost;
        data["turretTakedowns"] = this.turretTakedowns;
        data["unrealKills"] = this.unrealKills;
        data["visionScore"] = this.visionScore;
        data["visionWardsBoughtInGame"] = this.visionWardsBoughtInGame;
        data["wardsKilled"] = this.wardsKilled;
        data["wardsPlaced"] = this.wardsPlaced;
        data["win"] = this.win;
        return data;
    }

    clone(): Participant {
        const json = this.toJSON();
        let result = new Participant();
        result.init(json);
        return result;
    }
}

export interface IParticipant {
    assists?: number;
    baronKills?: number;
    bountyLevel?: number;
    challenges?: ParticipantChallenges;
    champExperience?: number;
    championId?: Champion;
    championName?: string | undefined;
    championTransform?: number;
    champLevel?: number;
    consumablesPurchased?: number;
    damageDealtToBuildings?: number | undefined;
    damageDealtToObjectives?: number;
    damageDealtToTurrets?: number;
    damageSelfMitigated?: number;
    deaths?: number;
    detectorWardsPlaced?: number;
    doubleKills?: number;
    dragonKills?: number;
    firstBloodAssist?: boolean;
    firstBloodKill?: boolean;
    firstTowerAssist?: boolean;
    firstTowerKill?: boolean;
    gameEndedInEarlySurrender?: boolean;
    gameEndedInSurrender?: boolean;
    goldEarned?: number;
    goldSpent?: number;
    individualPosition?: string | undefined;
    inhibitorKills?: number;
    inhibitorsLost?: number | undefined;
    inhibitorTakedowns?: number | undefined;
    item0?: number;
    item1?: number;
    item2?: number;
    item3?: number;
    item4?: number;
    item5?: number;
    item6?: number;
    itemsPurchased?: number;
    killingSprees?: number;
    kills?: number;
    lane?: string | undefined;
    largestCriticalStrike?: number;
    largestKillingSpree?: number;
    largestMultiKill?: number;
    longestTimeSpentLiving?: number;
    magicDamageDealt?: number;
    magicDamageDealtToChampions?: number;
    magicDamageTaken?: number;
    neutralMinionsKilled?: number;
    nexusKills?: number;
    nexusLost?: number | undefined;
    nexusTakedowns?: number | undefined;
    objectivesStolen?: number;
    objectivesStolenAssists?: number;
    participantId?: number;
    pentaKills?: number;
    perks?: Perks;
    physicalDamageDealt?: number;
    physicalDamageDealtToChampions?: number;
    physicalDamageTaken?: number;
    profileIcon?: number;
    puuid?: string | undefined;
    quadraKills?: number;
    riotIdName?: string | undefined;
    riotIdTagline?: string | undefined;
    role?: string | undefined;
    sightWardsBoughtInGame?: number;
    spell1Casts?: number;
    spell2Casts?: number;
    spell3Casts?: number;
    spell4Casts?: number;
    summoner1Casts?: number;
    summoner1Id?: number;
    summoner2Casts?: number;
    summoner2Id?: number;
    summonerId?: string | undefined;
    summonerLevel?: number;
    summonerName?: string | undefined;
    teamEarlySurrendered?: boolean;
    teamId?: Team;
    teamPosition?: string | undefined;
    timeCCingOthers?: number;
    timePlayed?: number;
    totalDamageDealt?: number;
    totalDamageDealtToChampions?: number;
    totalDamageShieldedOnTeammates?: number;
    totalDamageTaken?: number;
    totalHeal?: number;
    totalHealsOnTeammates?: number;
    totalMinionsKilled?: number;
    totalTimeCCDealt?: number;
    totalTimeSpentDead?: number;
    totalUnitsHealed?: number;
    tripleKills?: number;
    trueDamageDealt?: number;
    trueDamageDealtToChampions?: number;
    trueDamageTaken?: number;
    turretKills?: number;
    turretsLost?: number | undefined;
    turretTakedowns?: number | undefined;
    unrealKills?: number;
    visionScore?: number;
    visionWardsBoughtInGame?: number;
    wardsKilled?: number;
    wardsPlaced?: number;
    win?: boolean;

    [key: string]: any;
}

export class ParticipantChallenges implements IParticipantChallenges {
    abilityUses?: number | undefined;
    acesBefore15Minutes?: number | undefined;
    alliedJungleMonsterKills?: number | undefined;
    baronBuffGoldAdvantageOverThreshold?: number | undefined;
    baronTakedowns?: number | undefined;
    blastConeOppositeOpponentCount?: number | undefined;
    bountyGold?: number | undefined;
    buffsStolen?: number | undefined;
    completeSupportQuestInTime?: number | undefined;
    controlWardsPlaced?: number | undefined;
    controlWardTimeCoverageInRiverOrEnemyHalf?: number | undefined;
    damagePerMinute?: number | undefined;
    damageTakenOnTeamPercentage?: number | undefined;
    dancedWithRiftHerald?: number | undefined;
    deathsByEnemyChamps?: number | undefined;
    dodgeSkillShotsSmallWindow?: number | undefined;
    doubleAces?: number | undefined;
    dragonTakedowns?: number | undefined;
    earliestBaron?: number | undefined;
    earliestDragonTakedown?: number | undefined;
    earliestElderDragon?: number | undefined;
    earlyLaningPhaseGoldExpAdvantage?: number | undefined;
    effectiveHealAndShielding?: number | undefined;
    elderDragonKillsWithOpposingSoul?: number | undefined;
    elderDragonMultikills?: number | undefined;
    enemyChampionImmobilizations?: number | undefined;
    enemyJungleMonsterKills?: number | undefined;
    epicMonsterKillsNearEnemyJungler?: number | undefined;
    epicMonsterKillsWithin30SecondsOfSpawn?: number | undefined;
    epicMonsterSteals?: number | undefined;
    epicMonsterStolenWithoutSmite?: number | undefined;
    fasterSupportQuestCompletion?: number | undefined;
    fastestLegendary?: number | undefined;
    firstTurretKilledTime?: number | undefined;
    flawlessAces?: number | undefined;
    fullTeamTakedown?: number | undefined;
    gameLength?: number | undefined;
    getTakedownsInAllLanesEarlyJungleAsLaner?: number | undefined;
    goldPerMinute?: number | undefined;
    hadAfkTeammate?: number | undefined;
    hadOpenNexus?: number | undefined;
    highestChampionDamage?: number | undefined;
    highestCrowdControlScore?: number | undefined;
    highestWardKills?: number | undefined;
    immobilizeAndKillWithAlly?: number | undefined;
    initialBuffCount?: number | undefined;
    initialCrabCount?: number | undefined;
    jungleCsBefore10Minutes?: number | undefined;
    junglerKillsEarlyJungle?: number | undefined;
    junglerTakedownsNearDamagedEpicMonster?: number | undefined;
    kda?: number | undefined;
    killAfterHiddenWithAlly?: number | undefined;
    killedChampTookFullTeamDamageSurvived?: number | undefined;
    killParticipation?: number | undefined;
    killsNearEnemyTurret?: number | undefined;
    killsOnLanersEarlyJungleAsJungler?: number | undefined;
    killsOnOtherLanesEarlyJungleAsLaner?: number | undefined;
    killsOnRecentlyHealedByAramPack?: number | undefined;
    killsUnderOwnTurret?: number | undefined;
    killsWithHelpFromEpicMonster?: number | undefined;
    knockEnemyIntoTeamAndKill?: number | undefined;
    kTurretsDestroyedBeforePlatesFall?: number | undefined;
    landSkillShotsEarlyGame?: number | undefined;
    laneMinionsFirst10Minutes?: number | undefined;
    laningPhaseGoldExpAdvantage?: number | undefined;
    legendaryCount?: number | undefined;
    lostAnInhibitor?: number | undefined;
    maxCsAdvantageOnLaneOpponent?: number | undefined;
    maxKillDeficit?: number | undefined;
    maxLevelLeadLaneOpponent?: number | undefined;
    mejaisFullStackInTime?: number | undefined;
    moreEnemyJungleThanOpponent?: number | undefined;
    mostWardsDestroyedOneSweeper?: number | undefined;
    multiKillOneSpell?: number | undefined;
    multikills?: number | undefined;
    multikillsAfterAggressiveFlash?: number | undefined;
    multiTurretRiftHeraldCount?: number | undefined;
    mythicItemUsed?: number | undefined;
    outerTurretExecutesBefore10Minutes?: number | undefined;
    outnumberedKills?: number | undefined;
    outnumberedNexusKill?: number | undefined;
    perfectDragonSoulsTaken?: number | undefined;
    perfectGame?: number | undefined;
    pickKillWithAlly?: number | undefined;
    poroExplosions?: number | undefined;
    quickCleanse?: number | undefined;
    quickFirstTurret?: number | undefined;
    quickSoloKills?: number | undefined;
    riftHeraldTakedowns?: number | undefined;
    saveAllyFromDeath?: number | undefined;
    scuttleCrabKills?: number | undefined;
    shortestTimeToAceFromFirstTakedown?: number | undefined;
    skillshotsDodged?: number | undefined;
    skillshotsHit?: number | undefined;
    snowballsHit?: number | undefined;
    soloBaronKills?: number | undefined;
    soloKills?: number | undefined;
    soloTurretsLategame?: number | undefined;
    stealthWardsPlaced?: number | undefined;
    survivedSingleDigitHpCount?: number | undefined;
    survivedThreeImmobilizesInFight?: number | undefined;
    takedownOnFirstTurret?: number | undefined;
    takedowns?: number | undefined;
    takedownsAfterGainingLevelAdvantage?: number | undefined;
    takedownsBeforeJungleMinionSpawn?: number | undefined;
    takedownsFirst25Minutes?: number | undefined;
    takedownsInAlcove?: number | undefined;
    takedownsInEnemyFountain?: number | undefined;
    teamBaronKills?: number | undefined;
    teamDamagePercentage?: number | undefined;
    teamElderDragonKills?: number | undefined;
    teamRiftHeraldKills?: number | undefined;
    teleportTakedowns?: number | undefined;
    thirdInhibitorDestroyedTime?: number | undefined;
    threeWardsOneSweeperCount?: number | undefined;
    tookLargeDamageSurvived?: number | undefined;
    turretPlatesTaken?: number | undefined;
    turretsTakenWithRiftHerald?: number | undefined;
    turretTakedowns?: number | undefined;
    twentyMinionsIn3SecondsCount?: number | undefined;
    unseenRecalls?: number | undefined;
    visionScoreAdvantageLaneOpponent?: number | undefined;
    visionScorePerMinute?: number | undefined;
    wardsGuarded?: number | undefined;
    wardTakedowns?: number | undefined;
    wardTakedownsBefore20M?: number | undefined;
    _12AssistStreakCount?: number | undefined;

    [key: string]: any;

    constructor(data?: IParticipantChallenges) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.abilityUses = _data["abilityUses"];
            this.acesBefore15Minutes = _data["acesBefore15Minutes"];
            this.alliedJungleMonsterKills = _data["alliedJungleMonsterKills"];
            this.baronBuffGoldAdvantageOverThreshold = _data["baronBuffGoldAdvantageOverThreshold"];
            this.baronTakedowns = _data["baronTakedowns"];
            this.blastConeOppositeOpponentCount = _data["blastConeOppositeOpponentCount"];
            this.bountyGold = _data["bountyGold"];
            this.buffsStolen = _data["buffsStolen"];
            this.completeSupportQuestInTime = _data["completeSupportQuestInTime"];
            this.controlWardsPlaced = _data["controlWardsPlaced"];
            this.controlWardTimeCoverageInRiverOrEnemyHalf = _data["controlWardTimeCoverageInRiverOrEnemyHalf"];
            this.damagePerMinute = _data["damagePerMinute"];
            this.damageTakenOnTeamPercentage = _data["damageTakenOnTeamPercentage"];
            this.dancedWithRiftHerald = _data["dancedWithRiftHerald"];
            this.deathsByEnemyChamps = _data["deathsByEnemyChamps"];
            this.dodgeSkillShotsSmallWindow = _data["dodgeSkillShotsSmallWindow"];
            this.doubleAces = _data["doubleAces"];
            this.dragonTakedowns = _data["dragonTakedowns"];
            this.earliestBaron = _data["earliestBaron"];
            this.earliestDragonTakedown = _data["earliestDragonTakedown"];
            this.earliestElderDragon = _data["earliestElderDragon"];
            this.earlyLaningPhaseGoldExpAdvantage = _data["earlyLaningPhaseGoldExpAdvantage"];
            this.effectiveHealAndShielding = _data["effectiveHealAndShielding"];
            this.elderDragonKillsWithOpposingSoul = _data["elderDragonKillsWithOpposingSoul"];
            this.elderDragonMultikills = _data["elderDragonMultikills"];
            this.enemyChampionImmobilizations = _data["enemyChampionImmobilizations"];
            this.enemyJungleMonsterKills = _data["enemyJungleMonsterKills"];
            this.epicMonsterKillsNearEnemyJungler = _data["epicMonsterKillsNearEnemyJungler"];
            this.epicMonsterKillsWithin30SecondsOfSpawn = _data["epicMonsterKillsWithin30SecondsOfSpawn"];
            this.epicMonsterSteals = _data["epicMonsterSteals"];
            this.epicMonsterStolenWithoutSmite = _data["epicMonsterStolenWithoutSmite"];
            this.fasterSupportQuestCompletion = _data["fasterSupportQuestCompletion"];
            this.fastestLegendary = _data["fastestLegendary"];
            this.firstTurretKilledTime = _data["firstTurretKilledTime"];
            this.flawlessAces = _data["flawlessAces"];
            this.fullTeamTakedown = _data["fullTeamTakedown"];
            this.gameLength = _data["gameLength"];
            this.getTakedownsInAllLanesEarlyJungleAsLaner = _data["getTakedownsInAllLanesEarlyJungleAsLaner"];
            this.goldPerMinute = _data["goldPerMinute"];
            this.hadAfkTeammate = _data["hadAfkTeammate"];
            this.hadOpenNexus = _data["hadOpenNexus"];
            this.highestChampionDamage = _data["highestChampionDamage"];
            this.highestCrowdControlScore = _data["highestCrowdControlScore"];
            this.highestWardKills = _data["highestWardKills"];
            this.immobilizeAndKillWithAlly = _data["immobilizeAndKillWithAlly"];
            this.initialBuffCount = _data["initialBuffCount"];
            this.initialCrabCount = _data["initialCrabCount"];
            this.jungleCsBefore10Minutes = _data["jungleCsBefore10Minutes"];
            this.junglerKillsEarlyJungle = _data["junglerKillsEarlyJungle"];
            this.junglerTakedownsNearDamagedEpicMonster = _data["junglerTakedownsNearDamagedEpicMonster"];
            this.kda = _data["kda"];
            this.killAfterHiddenWithAlly = _data["killAfterHiddenWithAlly"];
            this.killedChampTookFullTeamDamageSurvived = _data["killedChampTookFullTeamDamageSurvived"];
            this.killParticipation = _data["killParticipation"];
            this.killsNearEnemyTurret = _data["killsNearEnemyTurret"];
            this.killsOnLanersEarlyJungleAsJungler = _data["killsOnLanersEarlyJungleAsJungler"];
            this.killsOnOtherLanesEarlyJungleAsLaner = _data["killsOnOtherLanesEarlyJungleAsLaner"];
            this.killsOnRecentlyHealedByAramPack = _data["killsOnRecentlyHealedByAramPack"];
            this.killsUnderOwnTurret = _data["killsUnderOwnTurret"];
            this.killsWithHelpFromEpicMonster = _data["killsWithHelpFromEpicMonster"];
            this.knockEnemyIntoTeamAndKill = _data["knockEnemyIntoTeamAndKill"];
            this.kTurretsDestroyedBeforePlatesFall = _data["kTurretsDestroyedBeforePlatesFall"];
            this.landSkillShotsEarlyGame = _data["landSkillShotsEarlyGame"];
            this.laneMinionsFirst10Minutes = _data["laneMinionsFirst10Minutes"];
            this.laningPhaseGoldExpAdvantage = _data["laningPhaseGoldExpAdvantage"];
            this.legendaryCount = _data["legendaryCount"];
            this.lostAnInhibitor = _data["lostAnInhibitor"];
            this.maxCsAdvantageOnLaneOpponent = _data["maxCsAdvantageOnLaneOpponent"];
            this.maxKillDeficit = _data["maxKillDeficit"];
            this.maxLevelLeadLaneOpponent = _data["maxLevelLeadLaneOpponent"];
            this.mejaisFullStackInTime = _data["mejaisFullStackInTime"];
            this.moreEnemyJungleThanOpponent = _data["moreEnemyJungleThanOpponent"];
            this.mostWardsDestroyedOneSweeper = _data["mostWardsDestroyedOneSweeper"];
            this.multiKillOneSpell = _data["multiKillOneSpell"];
            this.multikills = _data["multikills"];
            this.multikillsAfterAggressiveFlash = _data["multikillsAfterAggressiveFlash"];
            this.multiTurretRiftHeraldCount = _data["multiTurretRiftHeraldCount"];
            this.mythicItemUsed = _data["mythicItemUsed"];
            this.outerTurretExecutesBefore10Minutes = _data["outerTurretExecutesBefore10Minutes"];
            this.outnumberedKills = _data["outnumberedKills"];
            this.outnumberedNexusKill = _data["outnumberedNexusKill"];
            this.perfectDragonSoulsTaken = _data["perfectDragonSoulsTaken"];
            this.perfectGame = _data["perfectGame"];
            this.pickKillWithAlly = _data["pickKillWithAlly"];
            this.poroExplosions = _data["poroExplosions"];
            this.quickCleanse = _data["quickCleanse"];
            this.quickFirstTurret = _data["quickFirstTurret"];
            this.quickSoloKills = _data["quickSoloKills"];
            this.riftHeraldTakedowns = _data["riftHeraldTakedowns"];
            this.saveAllyFromDeath = _data["saveAllyFromDeath"];
            this.scuttleCrabKills = _data["scuttleCrabKills"];
            this.shortestTimeToAceFromFirstTakedown = _data["shortestTimeToAceFromFirstTakedown"];
            this.skillshotsDodged = _data["skillshotsDodged"];
            this.skillshotsHit = _data["skillshotsHit"];
            this.snowballsHit = _data["snowballsHit"];
            this.soloBaronKills = _data["soloBaronKills"];
            this.soloKills = _data["soloKills"];
            this.soloTurretsLategame = _data["soloTurretsLategame"];
            this.stealthWardsPlaced = _data["stealthWardsPlaced"];
            this.survivedSingleDigitHpCount = _data["survivedSingleDigitHpCount"];
            this.survivedThreeImmobilizesInFight = _data["survivedThreeImmobilizesInFight"];
            this.takedownOnFirstTurret = _data["takedownOnFirstTurret"];
            this.takedowns = _data["takedowns"];
            this.takedownsAfterGainingLevelAdvantage = _data["takedownsAfterGainingLevelAdvantage"];
            this.takedownsBeforeJungleMinionSpawn = _data["takedownsBeforeJungleMinionSpawn"];
            this.takedownsFirst25Minutes = _data["takedownsFirst25Minutes"];
            this.takedownsInAlcove = _data["takedownsInAlcove"];
            this.takedownsInEnemyFountain = _data["takedownsInEnemyFountain"];
            this.teamBaronKills = _data["teamBaronKills"];
            this.teamDamagePercentage = _data["teamDamagePercentage"];
            this.teamElderDragonKills = _data["teamElderDragonKills"];
            this.teamRiftHeraldKills = _data["teamRiftHeraldKills"];
            this.teleportTakedowns = _data["teleportTakedowns"];
            this.thirdInhibitorDestroyedTime = _data["thirdInhibitorDestroyedTime"];
            this.threeWardsOneSweeperCount = _data["threeWardsOneSweeperCount"];
            this.tookLargeDamageSurvived = _data["tookLargeDamageSurvived"];
            this.turretPlatesTaken = _data["turretPlatesTaken"];
            this.turretsTakenWithRiftHerald = _data["turretsTakenWithRiftHerald"];
            this.turretTakedowns = _data["turretTakedowns"];
            this.twentyMinionsIn3SecondsCount = _data["twentyMinionsIn3SecondsCount"];
            this.unseenRecalls = _data["unseenRecalls"];
            this.visionScoreAdvantageLaneOpponent = _data["visionScoreAdvantageLaneOpponent"];
            this.visionScorePerMinute = _data["visionScorePerMinute"];
            this.wardsGuarded = _data["wardsGuarded"];
            this.wardTakedowns = _data["wardTakedowns"];
            this.wardTakedownsBefore20M = _data["wardTakedownsBefore20M"];
            this._12AssistStreakCount = _data["12AssistStreakCount"];
        }
    }

    static fromJS(data: any): ParticipantChallenges {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantChallenges();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["abilityUses"] = this.abilityUses;
        data["acesBefore15Minutes"] = this.acesBefore15Minutes;
        data["alliedJungleMonsterKills"] = this.alliedJungleMonsterKills;
        data["baronBuffGoldAdvantageOverThreshold"] = this.baronBuffGoldAdvantageOverThreshold;
        data["baronTakedowns"] = this.baronTakedowns;
        data["blastConeOppositeOpponentCount"] = this.blastConeOppositeOpponentCount;
        data["bountyGold"] = this.bountyGold;
        data["buffsStolen"] = this.buffsStolen;
        data["completeSupportQuestInTime"] = this.completeSupportQuestInTime;
        data["controlWardsPlaced"] = this.controlWardsPlaced;
        data["controlWardTimeCoverageInRiverOrEnemyHalf"] = this.controlWardTimeCoverageInRiverOrEnemyHalf;
        data["damagePerMinute"] = this.damagePerMinute;
        data["damageTakenOnTeamPercentage"] = this.damageTakenOnTeamPercentage;
        data["dancedWithRiftHerald"] = this.dancedWithRiftHerald;
        data["deathsByEnemyChamps"] = this.deathsByEnemyChamps;
        data["dodgeSkillShotsSmallWindow"] = this.dodgeSkillShotsSmallWindow;
        data["doubleAces"] = this.doubleAces;
        data["dragonTakedowns"] = this.dragonTakedowns;
        data["earliestBaron"] = this.earliestBaron;
        data["earliestDragonTakedown"] = this.earliestDragonTakedown;
        data["earliestElderDragon"] = this.earliestElderDragon;
        data["earlyLaningPhaseGoldExpAdvantage"] = this.earlyLaningPhaseGoldExpAdvantage;
        data["effectiveHealAndShielding"] = this.effectiveHealAndShielding;
        data["elderDragonKillsWithOpposingSoul"] = this.elderDragonKillsWithOpposingSoul;
        data["elderDragonMultikills"] = this.elderDragonMultikills;
        data["enemyChampionImmobilizations"] = this.enemyChampionImmobilizations;
        data["enemyJungleMonsterKills"] = this.enemyJungleMonsterKills;
        data["epicMonsterKillsNearEnemyJungler"] = this.epicMonsterKillsNearEnemyJungler;
        data["epicMonsterKillsWithin30SecondsOfSpawn"] = this.epicMonsterKillsWithin30SecondsOfSpawn;
        data["epicMonsterSteals"] = this.epicMonsterSteals;
        data["epicMonsterStolenWithoutSmite"] = this.epicMonsterStolenWithoutSmite;
        data["fasterSupportQuestCompletion"] = this.fasterSupportQuestCompletion;
        data["fastestLegendary"] = this.fastestLegendary;
        data["firstTurretKilledTime"] = this.firstTurretKilledTime;
        data["flawlessAces"] = this.flawlessAces;
        data["fullTeamTakedown"] = this.fullTeamTakedown;
        data["gameLength"] = this.gameLength;
        data["getTakedownsInAllLanesEarlyJungleAsLaner"] = this.getTakedownsInAllLanesEarlyJungleAsLaner;
        data["goldPerMinute"] = this.goldPerMinute;
        data["hadAfkTeammate"] = this.hadAfkTeammate;
        data["hadOpenNexus"] = this.hadOpenNexus;
        data["highestChampionDamage"] = this.highestChampionDamage;
        data["highestCrowdControlScore"] = this.highestCrowdControlScore;
        data["highestWardKills"] = this.highestWardKills;
        data["immobilizeAndKillWithAlly"] = this.immobilizeAndKillWithAlly;
        data["initialBuffCount"] = this.initialBuffCount;
        data["initialCrabCount"] = this.initialCrabCount;
        data["jungleCsBefore10Minutes"] = this.jungleCsBefore10Minutes;
        data["junglerKillsEarlyJungle"] = this.junglerKillsEarlyJungle;
        data["junglerTakedownsNearDamagedEpicMonster"] = this.junglerTakedownsNearDamagedEpicMonster;
        data["kda"] = this.kda;
        data["killAfterHiddenWithAlly"] = this.killAfterHiddenWithAlly;
        data["killedChampTookFullTeamDamageSurvived"] = this.killedChampTookFullTeamDamageSurvived;
        data["killParticipation"] = this.killParticipation;
        data["killsNearEnemyTurret"] = this.killsNearEnemyTurret;
        data["killsOnLanersEarlyJungleAsJungler"] = this.killsOnLanersEarlyJungleAsJungler;
        data["killsOnOtherLanesEarlyJungleAsLaner"] = this.killsOnOtherLanesEarlyJungleAsLaner;
        data["killsOnRecentlyHealedByAramPack"] = this.killsOnRecentlyHealedByAramPack;
        data["killsUnderOwnTurret"] = this.killsUnderOwnTurret;
        data["killsWithHelpFromEpicMonster"] = this.killsWithHelpFromEpicMonster;
        data["knockEnemyIntoTeamAndKill"] = this.knockEnemyIntoTeamAndKill;
        data["kTurretsDestroyedBeforePlatesFall"] = this.kTurretsDestroyedBeforePlatesFall;
        data["landSkillShotsEarlyGame"] = this.landSkillShotsEarlyGame;
        data["laneMinionsFirst10Minutes"] = this.laneMinionsFirst10Minutes;
        data["laningPhaseGoldExpAdvantage"] = this.laningPhaseGoldExpAdvantage;
        data["legendaryCount"] = this.legendaryCount;
        data["lostAnInhibitor"] = this.lostAnInhibitor;
        data["maxCsAdvantageOnLaneOpponent"] = this.maxCsAdvantageOnLaneOpponent;
        data["maxKillDeficit"] = this.maxKillDeficit;
        data["maxLevelLeadLaneOpponent"] = this.maxLevelLeadLaneOpponent;
        data["mejaisFullStackInTime"] = this.mejaisFullStackInTime;
        data["moreEnemyJungleThanOpponent"] = this.moreEnemyJungleThanOpponent;
        data["mostWardsDestroyedOneSweeper"] = this.mostWardsDestroyedOneSweeper;
        data["multiKillOneSpell"] = this.multiKillOneSpell;
        data["multikills"] = this.multikills;
        data["multikillsAfterAggressiveFlash"] = this.multikillsAfterAggressiveFlash;
        data["multiTurretRiftHeraldCount"] = this.multiTurretRiftHeraldCount;
        data["mythicItemUsed"] = this.mythicItemUsed;
        data["outerTurretExecutesBefore10Minutes"] = this.outerTurretExecutesBefore10Minutes;
        data["outnumberedKills"] = this.outnumberedKills;
        data["outnumberedNexusKill"] = this.outnumberedNexusKill;
        data["perfectDragonSoulsTaken"] = this.perfectDragonSoulsTaken;
        data["perfectGame"] = this.perfectGame;
        data["pickKillWithAlly"] = this.pickKillWithAlly;
        data["poroExplosions"] = this.poroExplosions;
        data["quickCleanse"] = this.quickCleanse;
        data["quickFirstTurret"] = this.quickFirstTurret;
        data["quickSoloKills"] = this.quickSoloKills;
        data["riftHeraldTakedowns"] = this.riftHeraldTakedowns;
        data["saveAllyFromDeath"] = this.saveAllyFromDeath;
        data["scuttleCrabKills"] = this.scuttleCrabKills;
        data["shortestTimeToAceFromFirstTakedown"] = this.shortestTimeToAceFromFirstTakedown;
        data["skillshotsDodged"] = this.skillshotsDodged;
        data["skillshotsHit"] = this.skillshotsHit;
        data["snowballsHit"] = this.snowballsHit;
        data["soloBaronKills"] = this.soloBaronKills;
        data["soloKills"] = this.soloKills;
        data["soloTurretsLategame"] = this.soloTurretsLategame;
        data["stealthWardsPlaced"] = this.stealthWardsPlaced;
        data["survivedSingleDigitHpCount"] = this.survivedSingleDigitHpCount;
        data["survivedThreeImmobilizesInFight"] = this.survivedThreeImmobilizesInFight;
        data["takedownOnFirstTurret"] = this.takedownOnFirstTurret;
        data["takedowns"] = this.takedowns;
        data["takedownsAfterGainingLevelAdvantage"] = this.takedownsAfterGainingLevelAdvantage;
        data["takedownsBeforeJungleMinionSpawn"] = this.takedownsBeforeJungleMinionSpawn;
        data["takedownsFirst25Minutes"] = this.takedownsFirst25Minutes;
        data["takedownsInAlcove"] = this.takedownsInAlcove;
        data["takedownsInEnemyFountain"] = this.takedownsInEnemyFountain;
        data["teamBaronKills"] = this.teamBaronKills;
        data["teamDamagePercentage"] = this.teamDamagePercentage;
        data["teamElderDragonKills"] = this.teamElderDragonKills;
        data["teamRiftHeraldKills"] = this.teamRiftHeraldKills;
        data["teleportTakedowns"] = this.teleportTakedowns;
        data["thirdInhibitorDestroyedTime"] = this.thirdInhibitorDestroyedTime;
        data["threeWardsOneSweeperCount"] = this.threeWardsOneSweeperCount;
        data["tookLargeDamageSurvived"] = this.tookLargeDamageSurvived;
        data["turretPlatesTaken"] = this.turretPlatesTaken;
        data["turretsTakenWithRiftHerald"] = this.turretsTakenWithRiftHerald;
        data["turretTakedowns"] = this.turretTakedowns;
        data["twentyMinionsIn3SecondsCount"] = this.twentyMinionsIn3SecondsCount;
        data["unseenRecalls"] = this.unseenRecalls;
        data["visionScoreAdvantageLaneOpponent"] = this.visionScoreAdvantageLaneOpponent;
        data["visionScorePerMinute"] = this.visionScorePerMinute;
        data["wardsGuarded"] = this.wardsGuarded;
        data["wardTakedowns"] = this.wardTakedowns;
        data["wardTakedownsBefore20M"] = this.wardTakedownsBefore20M;
        data["12AssistStreakCount"] = this._12AssistStreakCount;
        return data;
    }

    clone(): ParticipantChallenges {
        const json = this.toJSON();
        let result = new ParticipantChallenges();
        result.init(json);
        return result;
    }
}

export interface IParticipantChallenges {
    abilityUses?: number | undefined;
    acesBefore15Minutes?: number | undefined;
    alliedJungleMonsterKills?: number | undefined;
    baronBuffGoldAdvantageOverThreshold?: number | undefined;
    baronTakedowns?: number | undefined;
    blastConeOppositeOpponentCount?: number | undefined;
    bountyGold?: number | undefined;
    buffsStolen?: number | undefined;
    completeSupportQuestInTime?: number | undefined;
    controlWardsPlaced?: number | undefined;
    controlWardTimeCoverageInRiverOrEnemyHalf?: number | undefined;
    damagePerMinute?: number | undefined;
    damageTakenOnTeamPercentage?: number | undefined;
    dancedWithRiftHerald?: number | undefined;
    deathsByEnemyChamps?: number | undefined;
    dodgeSkillShotsSmallWindow?: number | undefined;
    doubleAces?: number | undefined;
    dragonTakedowns?: number | undefined;
    earliestBaron?: number | undefined;
    earliestDragonTakedown?: number | undefined;
    earliestElderDragon?: number | undefined;
    earlyLaningPhaseGoldExpAdvantage?: number | undefined;
    effectiveHealAndShielding?: number | undefined;
    elderDragonKillsWithOpposingSoul?: number | undefined;
    elderDragonMultikills?: number | undefined;
    enemyChampionImmobilizations?: number | undefined;
    enemyJungleMonsterKills?: number | undefined;
    epicMonsterKillsNearEnemyJungler?: number | undefined;
    epicMonsterKillsWithin30SecondsOfSpawn?: number | undefined;
    epicMonsterSteals?: number | undefined;
    epicMonsterStolenWithoutSmite?: number | undefined;
    fasterSupportQuestCompletion?: number | undefined;
    fastestLegendary?: number | undefined;
    firstTurretKilledTime?: number | undefined;
    flawlessAces?: number | undefined;
    fullTeamTakedown?: number | undefined;
    gameLength?: number | undefined;
    getTakedownsInAllLanesEarlyJungleAsLaner?: number | undefined;
    goldPerMinute?: number | undefined;
    hadAfkTeammate?: number | undefined;
    hadOpenNexus?: number | undefined;
    highestChampionDamage?: number | undefined;
    highestCrowdControlScore?: number | undefined;
    highestWardKills?: number | undefined;
    immobilizeAndKillWithAlly?: number | undefined;
    initialBuffCount?: number | undefined;
    initialCrabCount?: number | undefined;
    jungleCsBefore10Minutes?: number | undefined;
    junglerKillsEarlyJungle?: number | undefined;
    junglerTakedownsNearDamagedEpicMonster?: number | undefined;
    kda?: number | undefined;
    killAfterHiddenWithAlly?: number | undefined;
    killedChampTookFullTeamDamageSurvived?: number | undefined;
    killParticipation?: number | undefined;
    killsNearEnemyTurret?: number | undefined;
    killsOnLanersEarlyJungleAsJungler?: number | undefined;
    killsOnOtherLanesEarlyJungleAsLaner?: number | undefined;
    killsOnRecentlyHealedByAramPack?: number | undefined;
    killsUnderOwnTurret?: number | undefined;
    killsWithHelpFromEpicMonster?: number | undefined;
    knockEnemyIntoTeamAndKill?: number | undefined;
    kTurretsDestroyedBeforePlatesFall?: number | undefined;
    landSkillShotsEarlyGame?: number | undefined;
    laneMinionsFirst10Minutes?: number | undefined;
    laningPhaseGoldExpAdvantage?: number | undefined;
    legendaryCount?: number | undefined;
    lostAnInhibitor?: number | undefined;
    maxCsAdvantageOnLaneOpponent?: number | undefined;
    maxKillDeficit?: number | undefined;
    maxLevelLeadLaneOpponent?: number | undefined;
    mejaisFullStackInTime?: number | undefined;
    moreEnemyJungleThanOpponent?: number | undefined;
    mostWardsDestroyedOneSweeper?: number | undefined;
    multiKillOneSpell?: number | undefined;
    multikills?: number | undefined;
    multikillsAfterAggressiveFlash?: number | undefined;
    multiTurretRiftHeraldCount?: number | undefined;
    mythicItemUsed?: number | undefined;
    outerTurretExecutesBefore10Minutes?: number | undefined;
    outnumberedKills?: number | undefined;
    outnumberedNexusKill?: number | undefined;
    perfectDragonSoulsTaken?: number | undefined;
    perfectGame?: number | undefined;
    pickKillWithAlly?: number | undefined;
    poroExplosions?: number | undefined;
    quickCleanse?: number | undefined;
    quickFirstTurret?: number | undefined;
    quickSoloKills?: number | undefined;
    riftHeraldTakedowns?: number | undefined;
    saveAllyFromDeath?: number | undefined;
    scuttleCrabKills?: number | undefined;
    shortestTimeToAceFromFirstTakedown?: number | undefined;
    skillshotsDodged?: number | undefined;
    skillshotsHit?: number | undefined;
    snowballsHit?: number | undefined;
    soloBaronKills?: number | undefined;
    soloKills?: number | undefined;
    soloTurretsLategame?: number | undefined;
    stealthWardsPlaced?: number | undefined;
    survivedSingleDigitHpCount?: number | undefined;
    survivedThreeImmobilizesInFight?: number | undefined;
    takedownOnFirstTurret?: number | undefined;
    takedowns?: number | undefined;
    takedownsAfterGainingLevelAdvantage?: number | undefined;
    takedownsBeforeJungleMinionSpawn?: number | undefined;
    takedownsFirst25Minutes?: number | undefined;
    takedownsInAlcove?: number | undefined;
    takedownsInEnemyFountain?: number | undefined;
    teamBaronKills?: number | undefined;
    teamDamagePercentage?: number | undefined;
    teamElderDragonKills?: number | undefined;
    teamRiftHeraldKills?: number | undefined;
    teleportTakedowns?: number | undefined;
    thirdInhibitorDestroyedTime?: number | undefined;
    threeWardsOneSweeperCount?: number | undefined;
    tookLargeDamageSurvived?: number | undefined;
    turretPlatesTaken?: number | undefined;
    turretsTakenWithRiftHerald?: number | undefined;
    turretTakedowns?: number | undefined;
    twentyMinionsIn3SecondsCount?: number | undefined;
    unseenRecalls?: number | undefined;
    visionScoreAdvantageLaneOpponent?: number | undefined;
    visionScorePerMinute?: number | undefined;
    wardsGuarded?: number | undefined;
    wardTakedowns?: number | undefined;
    wardTakedownsBefore20M?: number | undefined;
    _12AssistStreakCount?: number | undefined;

    [key: string]: any;
}

export class PerkStats implements IPerkStats {
    defense?: number;
    flex?: number;
    offense?: number;

    [key: string]: any;

    constructor(data?: IPerkStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.defense = _data["defense"];
            this.flex = _data["flex"];
            this.offense = _data["offense"];
        }
    }

    static fromJS(data: any): PerkStats {
        data = typeof data === 'object' ? data : {};
        let result = new PerkStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["defense"] = this.defense;
        data["flex"] = this.flex;
        data["offense"] = this.offense;
        return data;
    }

    clone(): PerkStats {
        const json = this.toJSON();
        let result = new PerkStats();
        result.init(json);
        return result;
    }
}

export interface IPerkStats {
    defense?: number;
    flex?: number;
    offense?: number;

    [key: string]: any;
}

export class PerkStyle implements IPerkStyle {
    description?: string | undefined;
    selections?: PerkStyleSelection[] | undefined;
    style?: number;

    [key: string]: any;

    constructor(data?: IPerkStyle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            if (Array.isArray(_data["selections"])) {
                this.selections = [] as any;
                for (let item of _data["selections"])
                    this.selections!.push(PerkStyleSelection.fromJS(item));
            }
            this.style = _data["style"];
        }
    }

    static fromJS(data: any): PerkStyle {
        data = typeof data === 'object' ? data : {};
        let result = new PerkStyle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        if (Array.isArray(this.selections)) {
            data["selections"] = [];
            for (let item of this.selections)
                data["selections"].push(item.toJSON());
        }
        data["style"] = this.style;
        return data;
    }

    clone(): PerkStyle {
        const json = this.toJSON();
        let result = new PerkStyle();
        result.init(json);
        return result;
    }
}

export interface IPerkStyle {
    description?: string | undefined;
    selections?: PerkStyleSelection[] | undefined;
    style?: number;

    [key: string]: any;
}

export class PerkStyleSelection implements IPerkStyleSelection {
    perk?: number;
    var1?: number;
    var2?: number;
    var3?: number;

    [key: string]: any;

    constructor(data?: IPerkStyleSelection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.perk = _data["perk"];
            this.var1 = _data["var1"];
            this.var2 = _data["var2"];
            this.var3 = _data["var3"];
        }
    }

    static fromJS(data: any): PerkStyleSelection {
        data = typeof data === 'object' ? data : {};
        let result = new PerkStyleSelection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["perk"] = this.perk;
        data["var1"] = this.var1;
        data["var2"] = this.var2;
        data["var3"] = this.var3;
        return data;
    }

    clone(): PerkStyleSelection {
        const json = this.toJSON();
        let result = new PerkStyleSelection();
        result.init(json);
        return result;
    }
}

export interface IPerkStyleSelection {
    perk?: number;
    var1?: number;
    var2?: number;
    var3?: number;

    [key: string]: any;
}

export class Perks implements IPerks {
    statPerks?: PerkStats;
    styles?: PerkStyle[] | undefined;

    [key: string]: any;

    constructor(data?: IPerks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.statPerks = _data["statPerks"] ? PerkStats.fromJS(_data["statPerks"]) : <any>undefined;
            if (Array.isArray(_data["styles"])) {
                this.styles = [] as any;
                for (let item of _data["styles"])
                    this.styles!.push(PerkStyle.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Perks {
        data = typeof data === 'object' ? data : {};
        let result = new Perks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["statPerks"] = this.statPerks ? this.statPerks.toJSON() : <any>undefined;
        if (Array.isArray(this.styles)) {
            data["styles"] = [];
            for (let item of this.styles)
                data["styles"].push(item.toJSON());
        }
        return data;
    }

    clone(): Perks {
        const json = this.toJSON();
        let result = new Perks();
        result.init(json);
        return result;
    }
}

export interface IPerks {
    statPerks?: PerkStats;
    styles?: PerkStyle[] | undefined;

    [key: string]: any;
}

export class Team2 implements ITeam2 {
    bans?: Ban[] | undefined;
    objectives?: Objectives;
    teamId?: Team;
    win?: boolean;

    [key: string]: any;

    constructor(data?: ITeam2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["bans"])) {
                this.bans = [] as any;
                for (let item of _data["bans"])
                    this.bans!.push(Ban.fromJS(item));
            }
            this.objectives = _data["objectives"] ? Objectives.fromJS(_data["objectives"]) : <any>undefined;
            this.teamId = _data["teamId"];
            this.win = _data["win"];
        }
    }

    static fromJS(data: any): Team2 {
        data = typeof data === 'object' ? data : {};
        let result = new Team2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.bans)) {
            data["bans"] = [];
            for (let item of this.bans)
                data["bans"].push(item.toJSON());
        }
        data["objectives"] = this.objectives ? this.objectives.toJSON() : <any>undefined;
        data["teamId"] = this.teamId;
        data["win"] = this.win;
        return data;
    }

    clone(): Team2 {
        const json = this.toJSON();
        let result = new Team2();
        result.init(json);
        return result;
    }
}

export interface ITeam2 {
    bans?: Ban[] | undefined;
    objectives?: Objectives;
    teamId?: Team;
    win?: boolean;

    [key: string]: any;
}

export class Summoner implements ISummoner {
    accountId?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    profileIconId?: number;
    puuid?: string | undefined;
    revisionDate?: number;
    summonerLevel?: number;

    [key: string]: any;

    constructor(data?: ISummoner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.accountId = _data["accountId"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.profileIconId = _data["profileIconId"];
            this.puuid = _data["puuid"];
            this.revisionDate = _data["revisionDate"];
            this.summonerLevel = _data["summonerLevel"];
        }
    }

    static fromJS(data: any): Summoner {
        data = typeof data === 'object' ? data : {};
        let result = new Summoner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["accountId"] = this.accountId;
        data["id"] = this.id;
        data["name"] = this.name;
        data["profileIconId"] = this.profileIconId;
        data["puuid"] = this.puuid;
        data["revisionDate"] = this.revisionDate;
        data["summonerLevel"] = this.summonerLevel;
        return data;
    }

    clone(): Summoner {
        const json = this.toJSON();
        let result = new Summoner();
        result.init(json);
        return result;
    }
}

export interface ISummoner {
    accountId?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    profileIconId?: number;
    puuid?: string | undefined;
    revisionDate?: number;
    summonerLevel?: number;

    [key: string]: any;
}

export class ChampionMasteryDto implements IChampionMasteryDto {
    masteryInfo?: ChampionMastery;
    championName?: string | undefined;

    constructor(data?: IChampionMasteryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.masteryInfo = _data["masteryInfo"] ? ChampionMastery.fromJS(_data["masteryInfo"]) : <any>undefined;
            this.championName = _data["championName"];
        }
    }

    static fromJS(data: any): ChampionMasteryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChampionMasteryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["masteryInfo"] = this.masteryInfo ? this.masteryInfo.toJSON() : <any>undefined;
        data["championName"] = this.championName;
        return data;
    }

    clone(): ChampionMasteryDto {
        const json = this.toJSON();
        let result = new ChampionMasteryDto();
        result.init(json);
        return result;
    }
}

export interface IChampionMasteryDto {
    masteryInfo?: ChampionMastery;
    championName?: string | undefined;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}